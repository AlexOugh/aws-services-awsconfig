---
swagger: "2.0"
info:
  version: "2017-01-03T21:24:45Z"
  title: "AWS-Services-API"
host: "zgzrdm4yo9.execute-api.us-east-1.amazonaws.com"
basePath: "/v1"
schemes:
- "https"
paths:
  /awsconfig:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "federateAccount"
        in: "query"
        required: true
        type: "string"
      - name: "federateRoleName"
        in: "query"
        required: true
        type: "string"
      - name: "roleExternalId"
        in: "header"
        required: true
        type: "string"
      - name: "account"
        in: "query"
        required: true
        type: "string"
      - name: "region"
        in: "query"
        required: true
        type: "string"
      - name: "roleName"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - auth_sso: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"account\": \"$input.params('account')\",\n  \"\
            region\": \"$input.params('region')\",\n  \"federateAccount\": \"$input.params('federateAccount')\"\
            ,\n  \"federateRoleName\": \"$input.params('federateRoleName')\",\n  \"\
            roleName\": \"$input.params('roleName')\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\
            \n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:awsconfig-checker/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleExternalId"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - auth_sso: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"account\": \"$input.path('$').account\",\n  \"\
            region\": \"$input.path('$').region\",\n  \"federateAccount\": \"$input.path('$').federateAccount\"\
            ,\n  \"federateRoleName\": \"$input.path('$').federateRoleName\",\n  \"\
            roleName\": \"$input.path('$').roleName\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\
            \n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:awsconfig-enabler/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleExternalId"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - auth_sso: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"account\": \"$input.path('$').account\",\n  \"\
            region\": \"$input.path('$').region\",\n  \"federateAccount\": \"$input.path('$').federateAccount\"\
            ,\n  \"federateRoleName\": \"$input.path('$').federateRoleName\",\n  \"\
            roleName\": \"$input.path('$').roleName\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\
            \n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:awsconfig-remover/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /billing:
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    x-amazon-apigateway-any-method:
      produces:
      - "application/json"
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:BillingLambda-LambdaFunction-1TYMZARBAGE4Y/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "q5zvnv"
        cacheKeyParameters:
        - "method.request.path.proxy"
        type: "aws_proxy"
  /cloudtrail:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "federateAccount"
        in: "query"
        required: true
        type: "string"
      - name: "federateRoleName"
        in: "query"
        required: true
        type: "string"
      - name: "roleExternalId"
        in: "header"
        required: true
        type: "string"
      - name: "account"
        in: "query"
        required: true
        type: "string"
      - name: "region"
        in: "query"
        required: true
        type: "string"
      - name: "roleName"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"account\": \"$input.params('account')\",\n  \"\
            region\": \"$input.params('region')\",\n  \"federateAccount\": \"$input.params('federateAccount')\"\
            ,\n  \"federateRoleName\": \"$input.params('federateRoleName')\",\n  \"\
            roleName\": \"$input.params('roleName')\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\
            \n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:cloudtrail-checker/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleExternalId"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"account\": \"$input.path('$').account\",\n  \"\
            region\": \"$input.path('$').region\",\n  \"federateAccount\": \"$input.path('$').federateAccount\"\
            ,\n  \"federateRoleName\": \"$input.path('$').federateRoleName\",\n  \"\
            roleName\": \"$input.path('$').roleName\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\
            \n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:cloudtrail-enabler/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleExternalId"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"account\": \"$input.path('$').account\",\n  \"\
            region\": \"$input.path('$').region\",\n  \"federateAccount\": \"$input.path('$').federateAccount\"\
            ,\n  \"federateRoleName\": \"$input.path('$').federateRoleName\",\n  \"\
            roleName\": \"$input.path('$').roleName\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\
            \n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:cloudtrail-remover/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /spotinst/{proxy+}:
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    x-amazon-apigateway-any-method:
      produces:
      - "application/json"
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::089476987273:role/AWSServicesAPI-InvokeFunctionRole-3YSJFDC74Q2W"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          not permitted.*:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          unauthorized.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,refresh_token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:SpotinstLambda-LambdaFunction-SU3BLRMFJXD6/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "q5zvnv"
        cacheKeyParameters:
        - "method.request.path.proxy"
        type: "aws_proxy"
securityDefinitions:
  auth_sso:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerCredentials: "arn:aws:iam::089476987273:role/role_to_run_lambda"
      authorizerResultTtlInSeconds: 300
      authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:089476987273:function:custom_authorizer/invocations"
      type: "token"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
