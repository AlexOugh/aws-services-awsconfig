AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API interfaces and corresponding lambda functions for awsconfig.
Resources:
  LambdaFunctionIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "config:*"
                      - "iam:*"
                      - "lambda:*"
                      - "sns:Create*"
                      - "sns:Publish*"
                      - "sns:Get*"
                      - "sns:List*"
                      - "sns:Delete*"
                      - "sns:Subscribe*"
                      - "tag:Get*"
                    Resource: "*"
                  -
                    Effect: "Allow"
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: "arn:aws:logs:*:*:*"
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:PutObject*"
                    Resource: "arn:aws:s3:::*.awsconfig/AWSLogs/*/*"
                    Condition:
                      StringLike:
                        s3:x-amz-acl: "bucket-owner-full-control"
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:GetBucketAcl"
                    Resource: "arn:aws:s3:::*.awsconfig"
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:ListAllMyBuckets"
                      - "s3:CreateBucket"
                    Resource: "*"

  AlertLambdaFunctionIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowAlertLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: "arn:aws:logs:*:*:*"
                  -
                    Effect: "Allow"
                    Action:
                      - "dynamodb:GetRecords"
                      - "dynamodb:GetShardIterator"
                      - "dynamodb:DescribeStream"
                      - "dynamodb:ListStreams"
                    Resource: "*"

  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.check
      Runtime: nodejs4.3
      CodeUri: s3://sgas.sam.aws-services-awsconfig/awsconfig.zip
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 60
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /awsconfig
            Method: get

  PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.enable
      Runtime: nodejs4.3
      CodeUri: s3://sgas.sam.aws-services-awsconfig/awsconfig.zip
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 60
      Environment:
        Variables:
          BUCKET_NAME_POSTFIX: ".awsconfig"
          TOPIC_NAME: "awsconfig-topic"
          SAVER_FUNCTION_NAME: !Ref SaveAlertFunction
          ASSUME_ROLE_POLICY_NAME: "awsconfig_assume_role_policy"
          ROLE_NAME: "awsconfig-setup-role"
          INLINE_POLICY_NAME: "awsconfig_setup_policy"
          DELIVERY_CHANNEL_NAME: "default"
          CONFIG_RECORDER_NAME: "default"
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        PutResource:
          Type: Api
          Properties:
            Path: /awsconfig
            Method: post

  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.disable
      Runtime: nodejs4.3
      CodeUri: s3://sgas.sam.aws-services-awsconfig/awsconfig.zip
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 60
      Environment:
        Variables:
          TOPIC_NAME: "awsconfig-topic"
          ROLE_NAME: "awsconfig-setup-role"
          INLINE_POLICY_NAME: "awsconfig_setup_policy"
      Events:
        DeleteResource:
          Type: Api
          Properties:
            Path: /awsconfig
            Method: delete

  SaveAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.save_alert
      Runtime: nodejs4.3
      CodeUri: s3://sgas.sam.aws-services-awsconfig/awsconfig.zip
      Role: !GetAtt AlertLambdaFunctionIAMRole.Arn
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBTable.StreamArn
            StartingPosition: TRIM_HORIZON

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
